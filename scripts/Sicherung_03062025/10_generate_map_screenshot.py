#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
10_generate_map_screenshot.py
-----------------------------
Opens an existing interactive HTML map file (generated by step 6)
using Selenium and a headless Chrome browser, waits for it to load,
and saves a screenshot as a PNG file.

Requires 'selenium' and 'webdriver-manager'.
Requires a working Google Chrome installation.
"""

SCRIPT_NAME = "10_generate_map_screenshot.py"
SCRIPT_VERSION = "1.0.0" # Einführung einer Versionskontrolle, lauffaehiges Script

import sys
import os
import argparse
import time
from selenium import webdriver
from selenium.webdriver.chrome.options import Options as ChromeOptions # Renamed for clarity
from selenium.webdriver.chrome.service import Service as ChromeService
# Use webdriver_manager to automatically handle chromedriver download/updates
try:
    from webdriver_manager.chrome import ChromeDriverManager
except ImportError:
    print("Fehler: webdriver-manager nicht gefunden. Bitte installieren: pip install webdriver-manager")
    sys.exit(1)

def capture_screenshot(html_input_path: str, png_output_path: str, width: int = 1200, height: int = 800, delay: int = 5):
    """Captures a screenshot of the HTML map."""
    print(f"[Info] Generating screenshot for: {html_input_path}")

    # --- Input Validation ---
    if not os.path.exists(html_input_path):
        print(f" Fehler: HTML-Inputdatei nicht gefunden: {html_input_path}")
        # Create a dummy output file to satisfy Snakemake? Or exit? Let's exit.
        sys.exit(1)
    if not html_input_path.lower().endswith(".html"):
        print(f" Fehler: Inputdatei ist keine HTML-Datei: {html_input_path}")
        sys.exit(1)

    # --- Ensure Output Directory Exists ---
    output_dir = os.path.dirname(png_output_path)
    if output_dir:
        os.makedirs(output_dir, exist_ok=True)

    # --- Configure Chrome Options ---
    chrome_options = ChromeOptions()
    chrome_options.add_argument("--headless=new")  # Use the new headless mode
    chrome_options.add_argument(f"--window-size={width},{height}")
    chrome_options.add_argument("--hide-scrollbars")
    chrome_options.add_argument("--disable-gpu") # Often necessary for headless mode
    chrome_options.add_argument("--log-level=3") # Suppress console logs from Chrome/Driver
    chrome_options.add_experimental_option('excludeSwitches', ['enable-logging']) # Suppress DevTools logs

    # --- Initialize WebDriver ---
    driver = None # Initialize driver to None
    try:
        print("[Info] Initialisiere WebDriver...")
        # Automatically download/update and start chromedriver service
        service = ChromeService(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)
        print("[Info] WebDriver initialisiert.")

        # --- Load HTML File ---
        # Construct file:// URL - needs absolute path
        abs_html_path = os.path.abspath(html_input_path)
        file_url = f"file:///{abs_html_path.replace(os.sep, '/')}" # Use forward slashes for URL
        print(f"[Info] Lade URL: {file_url}")
        driver.get(file_url)

        # --- Wait for Map to Load ---
        print(f"[Info] Warte {delay} Sekunden, damit die Karte laden kann...")
        time.sleep(delay)

        # --- Capture Screenshot ---
        print("[Info] Erstelle Screenshot...")
        # Possible Improvement: Capture only the map container element if its ID is known?
        # For now, capture the full viewport.
        success = driver.save_screenshot(png_output_path)
        if success:
            print(f"[OK] Screenshot erfolgreich gespeichert: {png_output_path}")
        else:
            # save_screenshot returns False on failure, but often throws exception instead
            print(f" Fehler: Screenshot konnte nicht gespeichert werden (save_screenshot gab False zurück): {png_output_path}")
            # Consider exiting here? For now, continue to finally block.

    except Exception as e:
        print(f" Fehler während der Screenshot-Erstellung: {e}")
        # Print more details if it's a WebDriverException?
        if "selenium.common.exceptions" in str(type(e)):
             print(f"   (Selenium/WebDriver Fehlerdetails: {getattr(e, 'msg', 'Keine Details')})")
        # Exit with error for Snakemake
        if driver: # Attempt to quit driver even on error
            driver.quit()
        sys.exit(1)

    finally:
        # --- Clean Up ---
        if driver:
            print("[Info] Schließe WebDriver...")
            driver.quit()
            print("[Info] WebDriver geschlossen.")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generate a PNG screenshot from a Folium HTML map.")
    parser.add_argument("--input-html", required=True, help="Path to the input HTML map file.")
    parser.add_argument("--output-png", required=True, help="Path to save the output PNG screenshot file.")
    parser.add_argument("--width", type=int, default=1200, help="Width of the browser window for screenshot.")
    parser.add_argument("--height", type=int, default=800, help="Height of the browser window for screenshot.")
    parser.add_argument("--delay", type=int, default=5, help="Delay in seconds to wait for the map to load.")
    args = parser.parse_args()

    capture_screenshot(args.input_html, args.output_png, args.width, args.height, args.delay)